---
import { z } from "zod";
import { contactSchema } from "~/contacts";
import A from "~/components/A.astro";
import Button from "~/components/Button.astro";
import ErrorMessage from "~/components/ErrorMessage.astro";
import Input from "~/components/Input.astro";
import Label from "~/components/Label.astro";
import { db } from "~/contacts";
import Layout from "../_layout.astro";

const newContactRequestSchema = contactSchema
	.omit({
		id: true,
	})
	.extend({
		email: contactSchema.shape.email.refine(
			async (value) => {
				const exists = await db.emailExists(value);
				return !exists;
			},
			{
				message: "Email already in use.",
			},
		),
	});

type NewContactRequest = z.infer<typeof newContactRequestSchema>;

let contact: NewContactRequest = {
	firstName: "",
	lastName: "",
	phone: "",
	email: "",
};
let errors: z.inferFlattenedErrors<typeof newContactRequestSchema> | null =
	null;

if (Astro.request.method === "POST") {
	const formData = await Astro.request.formData();
	contact = {
		firstName: formData.get("firstName")?.toString() ?? "",
		lastName: formData.get("lastName")?.toString() ?? "",
		phone: formData.get("phone")?.toString() ?? "",
		email: formData.get("email")?.toString() ?? "",
	};

	const result = await newContactRequestSchema.safeParseAsync(contact);
	if (result.success) {
		await db.create(result.data);
		return Astro.redirect("/contacts");
	}

	errors = result.error.flatten();
}
---

<Layout>
	<form
		action="/contacts/new"
		method="post"
		class="mx-auto w-full max-w-3xl space-y-8"
	>
		<fieldset class="space-y-4">
			<legend>Contact Values</legend>
			<div class="grid grid-cols-6 gap-x-6 gap-y-8">
				<div class="col-span-3 space-y-2">
					<Label for="first-name">First Name</Label>
					<Input
						id="first-name"
						aria-describedby="first-name-error"
						name="firstName"
						value={contact.firstName}
					/>
					<ErrorMessage id="first-name-error">
						{errors?.fieldErrors.firstName?.[0]}
					</ErrorMessage>
				</div>
				<div class="col-span-3 space-y-2">
					<Label for="last-name">Last Name</Label>
					<Input
						id="last-name"
						aria-describedby="last-name-error"
						name="lastName"
						value={contact.lastName}
					/>
					<ErrorMessage id="last-name-error">
						{errors?.fieldErrors.lastName?.[0]}
					</ErrorMessage>
				</div>
				<div class="col-span-6 space-y-2">
					<Label for="phone">Phone</Label>
					<Input
						id="phone"
						aria-describedby="phone-error"
						name="phone"
						value={contact.phone}
					/>
					<ErrorMessage id="phone-error">
						{errors?.fieldErrors.phone?.[0]}
					</ErrorMessage>
				</div>
				<div class="col-span-6 space-y-2">
					<Label for="email">Email</Label>
					<Input
						id="email"
						area-describedby="email-error"
						hx-get="/contacts/email"
						hx-target="next [data-error-message]"
						hx-trigger="change, keyup delay:200ms changed"
						name="email"
						type="email"
						value={contact.email}
					/>
					<ErrorMessage id="email-error">
						{errors?.fieldErrors.email?.[0]}
					</ErrorMessage>
				</div>
			</div>
		</fieldset>
		<div class="flex items-center gap-3">
			<Button type="submit">Save</Button>
			<A href="/contacts">Back</A>
		</div>
	</form>
</Layout>
